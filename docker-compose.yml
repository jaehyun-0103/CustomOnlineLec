version: '3.9'

services:
  nginx_react:
    container_name: nginx_react
    env_file:
      - ./frontend/.env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # volumes:
    #   - ./frontend/dist:/frontend/dist
    restart: always
    ports:
      - "80:80"
    depends_on:
      - springboot
      # - flask
    networks:
      - custom_network
  # mysql:
  #   container_name: mysql
  #   image: "mysql:8"  # 원하는 MySQL 버전으로 변경할 수 있습니다.
  #   environment:
  #     MYSQL_DATABASE: customdb  # 생성할 데이터베이스 이름
  #     MYSQL_ROOT_HOST: '%'
  #     MYSQL_ROOT_PASSWORD: 0000  # root 사용자의 비밀번호 설정
  #     MYSQL_USER: user  # 생성할 사용자 이름
  #     MYSQL_PASSWORD: 0000  # 생성할 사용자의 비밀번호
  #     TZ: 'Asia/Seoul'
  #   # volumes:
  #   #   - ./mysql/conf.d:/etc/mysql/conf.d/ # MySQL 설정 파일 위치
  #   ports:
  #     - "3305:3306"  # 필요에 따라 포트 변경 가능
  #   command:
  #     - --character-set-server=utf8mb4
  #     - --collation-server=utf8mb4_unicode_ci
  #   restart: always
  #   networks:
  #     - custom_network

  springboot:
    container_name: springboot
    # Spring Boot 서버 설정
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    # depends_on:
    #   - mysql
    ports:
      - "8080:8080"
    networks:
      - custom_network

  flask:
    container_name: flask
    # 환경 설정 부분
    env_file:
      - ./AI/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    build:
      context: ./AI
      dockerfile: Dockerfile
    volumes:
      - ./AI:/AI
    command: sh -c "python main.py && gunicorn", "main:app", "-b", "0.0.0.0:5000"
    restart: always
    ports:
      - "5000:5000"
    expose:
      - 5000
    depends_on:
      - celery
      - redis
    networks:
      - custom_network

  celery:
    container_name: celery_service
    env_file:
      - ./AI/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    build:
      context: AI
      dockerfile: Dockerfile
    command: sh -c "celery -A tasks worker -l info"
    restart: always
    volumes:
      - ./AI:/AI
    depends_on:
      - redis
    networks:
      - custom_network

  redis:
    container_name: redis
    image: "redis:latest"
    restart: always
    hostname: redis
    networks:
      - custom_network

  


# 컨테이너들을 동일 네트워크로 묶기 위함(이거 안해도 되긴 하던데 왜 하는지 모르겠네)
networks:
  custom_network:

