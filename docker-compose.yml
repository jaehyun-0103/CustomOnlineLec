version: '3.9'

services:
  nginx_react:
    container_name: nginx_react
    env_file:
      - ./frontend/.env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # volumes:
    #   - ./frontend/dist:/frontend/dist
    restart: always
    ports:
      - "80:80"
    depends_on:
      - springboot
      # - flask

  mysql:
    image: mysql:8.0
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: 0000
      MYSQL_DATABASE: customdb
      MYSQL_USER: user
      MYSQL_PASSWORD: 0000
      TZ: Asia/Seoul
    volumes:
      # - mysql_data:/var/lib/mysql
      - ./db/mysql/data:/var/lib/mysql
      - ./db/mysql/init:/docker-entrypoint-initdb.d
    platform: linux/x86_64

  springboot:
    container_name: springboot
    # Spring Boot 서버 설정
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - mysql

  flask:
    container_name: flask
    # 환경 설정 부분
    env_file:
      - ./AI/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    build:
      context: ./AI
      dockerfile: Dockerfile
    volumes:
      - ./AI:/AI
    command: sh -c "python main.py && gunicorn", "main:app", "-b", "0.0.0.0:5000"
    restart: always
    ports:
      - "5000:5000"
    expose:
      - 5000
    depends_on:
      - celery
      - redis

  celery:
    container_name: celery_service
    env_file:
      - ./AI/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    build:
      context: AI
      dockerfile: Dockerfile
    command: sh -c "celery -A tasks worker -l info"
    restart: always
    volumes:
      - ./AI:/AI
    depends_on:
      - redis

  redis:
    container_name: redis
    image: "redis:latest"
    restart: always
    hostname: redis
