# 전역 설정
user nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

# http 블록 시작
http {
    # upstream 지시어 설정(nginx와 연결한 웹 어플리케이션 서버를 지정), (nginx : downstream / aphach : upstream(spring))
    upstream springboot {
        # host주소:포트(docker를 사용하기 때문에 host 주소에 docker container 이름을 작성)
        # http:springboot:8080/api/products로 접속
        server springboot:8080;
    }
    server {
        listen 80;
        server_name localhost;

        # server_name 도메인_주소; # 도메인 주소 적용하면 사용
        location / {
            # root   /home/tojaman/CustomOnlineLec/frontend/public/index.html; # react 어플리케이션 진입점 디렉토리 경로
            # root   /home/tojaman/CustomOnlineLec/frontend/public;
            # Dockerfile에서 root를 /usr/share/nginx/html 을 바라보게 했으므로
            root    /usr/share/nginx/html;
            index  index.html index.htm; # index.html = react 어플리케이션 진입점
            try_files $uri $uri/ /index.html;

            proxy_redirect     off; # backend 서버에서 만든 HTTP header를 바꾸지 않고 그대로 전달
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            
            proxy_set_header X-NginX-Proxy true;
        }

        # 결국 외부(브라우저)에서 springboot로 직접 연결(/api/)하는 것을 nginx에서 blocking하고 nginx를 거쳐서 
        location /api/ {
            # 스프링 부트 애플리케이션 역방향 프록시
            proxy_pass http://springboot/; # upstream springboot에서 설정한 URL로 접속(http://localhost:8080)
            # uri의 /api/를 제거 -> [ http://localhost:8080/api/product/ -> http://localhost:8080/product/]
            rewrite ^/api(/.*)$ $1 break;
            
            proxy_redirect     off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # location 안에 넣어줘야함
            # proxy_buffer_size          128k;
            # proxy_buffers              4 256k;
            # proxy_busy_buffers_size    256k;
        }
    }
    sendfile            on; # 리눅스 서버의 sendfile() 시스템 콜을 사용할지 말지에 대한 설정(on으로 하면 파일 전송 속도 빨라짐)
    server_tokens       off; # 헤더에 nginx버전을 숨기는 기능을 합니다. 보안상 off로 설정을 권장
    keepalive_timeout   65; # 클라이언트의 접속 유지 시간을 지정
}
